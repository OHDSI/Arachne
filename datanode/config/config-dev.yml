spring:
#  profiles.active: central
  flyway:
    table: "flyway_schema_history"
  datasource:
    url: jdbc:postgresql://localhost:5432/datanode
    driver-class-name: org.postgresql.Driver
    platform: postgresql
    username: ohdsi
    password: ENC(0Lpfvg9UPAyaaZpSIqwaDg==)
    connection-test-query: select 1

server:
  port: 8880
  ssl:
    enabled: true # Resolvable hostname is required on production, use SSL by IP only in development
    strictMode: false
    key-store: classpath:keystore.jks
    key-store-password: odysseus
    key-alias: arachne
    key-password: odysseus
datanode:
  users:
    admin:
      email: admin@odysseusinc.com
      firstName: Datanode
      lastName: Admin
      password: $2a$12$FLBjwwU2GOrCAASJg.E7N.uNiYd6rC4lLBN5hYmEiq49IPsMFnRxa
  jwt:
    expiration: 604800
executionEngine:
  host: localhost
docker:
  host: unix:///var/run/docker.sock
#atlas:
#  host: http://localhost
#  port: 8088
#  urlContext: WebAPI
#  auth:
#    schema: DATABASE
#    username: admin@odysseusinc.com
#    password: ENC(ScVtM/zv348iHQ3b+zZHytAiOcU+DbY2)
#  scheduler:
#      checkInterval: 10000
entities:
  scheduler:
    checkListRequestsInterval: 1000
    checkRequestInterval: 1000
cohorts:
  result:
    countEnabled: true
    summaryEnabled: true
analysis:
  max_wait_update_interval: 1 hour
  scheduler:
    resendFailuresInterval: 60000
    invalidateExecutingInterval: 120000
central:
  scheduler:
    checkingInterval: 20000

authenticator:
  user.registrationStrategy: CREATE_IF_FIRST
  methods:
#    rest-central:
#      config:
#        url: https://localhost:8443/api/v1/auth/login
#        infoUrl: https://localhost:8443/api/v1/auth/me
    db:
      service: org.ohdsi.authenticator.service.jdbc.JdbcAuthService
      config:
        jdbcUrl: jdbc:postgresql://localhost:5432/datanode
        username: ohdsi
        password: ENC(0Lpfvg9UPAyaaZpSIqwaDg==)
        query: select password, id, username, first_name as firstname, last_name as lastname, email from users where username=:username
        passwordEncoder: org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder
        fieldsToExtract:
          username: username
          firstName: firstname
          lastName: lastname
          email: email

security:
  method: db

jasypt.encryptor.password: arachne